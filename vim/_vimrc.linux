set nocompatible
set t_Co=256
let mapleader=','
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
set diffexpr=MyDiff()
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"Astyle 
func Astyle()
    if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
        exec "w"
        exec "!Astyle -A2 -p -xd -S -y --indent=spaces %"
        exec "e!"
    endif
endfunc

"Compile C,C++,Java
func Compile()
    exec "w"
    "C
    if &filetype == 'c'
        exec "!gcc  % -g -o %<.exe"
        "C++
    elseif &filetype == 'cpp'
        exec "!g++  % -g -o %<.exe"
        "Java
    elseif &filetype == 'java' 
        exec "!javac %" 
    elseif &filetype == 'python'
        exec "!python %"
    endif
endfunc

"Run C,C++,Java
func Run()
    if &filetype == 'c' || &filetype == 'cpp'
        exec "!./%<.exe"
        "Java
    elseif &filetype == 'java' 
        exec "!./java %<"
    endif
endfunc

"Debug C,C++,Java
func Debug()
    exec "w"
    "C
    if &filetype == 'c'
        "exec "!gcc % -g -o %<.exe"
        exec "!gdb %<.exe"
    elseif &filetype == 'cpp'
        "exec "!g++ % -g -o %<.exe"
        exec "!gdb %<.exe"
    elseif &filetype == 'java' 
        "exec "!javac %" 
        exec "!jdb %<"
    endif
endfunc

"map shortKey
nmap <F4> :call Compile()<CR>
nmap <F5> :call Run()<CR>
nmap <F6> :call Debug()<CR>
nmap <F3> :call Astyle()<CR>

"Toggle Menu and Toolbar
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=l
set guioptions-=L
nmap <silent> <F2> :if &guioptions =~# 'T' <Bar>
            \set guioptions-=T <Bar>
            \set guioptions-=m <bar>
            \else <Bar>
            \set guioptions+=T <Bar>
            \set guioptions+=m <Bar>
            \endif<CR>

"Encoding & ........
set fileencodings=utf-8,gbk
set encoding=utf-8
set langmenu=en_US
let $LANG='en_US'
set ambiwidth=double
"lang messages en_US,utf-8
set smarttab
set softtabstop=4
set backspace=2
set nowrap
set expandtab
filetype plugin on
filetype indent on
set tags=tags
set tags+=/usr/share/vim/stl_tags
set history=200
"Dir setting
set autochdir
set number
filetype on
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set showmatch
"set spell
set autoread
set wildmenu
set laststatus=2
set wildignore=*.o,*.obj,*.bak,*.exe
"Clear highlight
nmap <silent> <leader>/ :noh<CR>
nmap <silent> <leader>w :w<CR>
nmap <,wsilent> <leader>l :marks<CR>

" Æ¥ÅäÀšºÅžßÁÁµÄÊ±Œä£šµ¥Î»ÊÇÊ®·ÖÖ®Ò»Ãë£© 
set matchtime=8
" ÔÚËÑË÷µÄÊ±ºòºöÂÔŽóÐ¡ÐŽ
set ignorecase

"Work Dir
"cd D:\Paroid\Project
nmap <C-b> :cd /home/paroid/project<cr>
"TagList option
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_One_File = 1
let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Compart_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_Enable_Fold_Column = 0
"let Tlist_Auto_Open = 1
"VimWiki
let g:vimwiki_camel_case = 0
let g:vimwiki_list = [{'path': 'D:\Paroid\Wiki\vimwiki', 'path_html': 'D:\Paroid\Wiki\public_html','auto_export': 0}]
let g:vimwiki_CJK_length = 1
let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,br,hr,div,del,code,span'
nmap <S-F4> :Vimwiki2HTML<CR>
nmap <S-F5> :VimwikiAll2HTML<CR>
nmap <leader>wtt :VimwikiTable
"color scheme & font
colorscheme molokai
set guifont=consolas\ 11
"window size
set columns=108
set lines=28
set sessionoptions+=resize
"Pydiction
"let g:pydiction_location = 'D:\Paroid\Vim\vimfiles\ftplugin\pydiction\complete-dict'
"Cscope
"cs a D:\Paroid\Vim\cscope.out

nmap <silent> <leader>q :q<CR>
nmap <silent> <leader>r :MRU<CR>
nmap <silent> <leader>c :Calendar<CR>
nmap <silent> <leader>z ``ggvG=``
nmap <silent> wr :set wrap<CR>
nmap <silent> wR :set nowrap<CR>
nmap <silent> <leader>s ddkkpj
nnoremap <silent> <leader>h :%!xxd<CR>
nnoremap <silent> <leader>H :%!xxd -r<CR>
nnoremap j gj
nnoremap k gk
nnoremap <A-j> j
nnoremap <A-k> k
inoremap <A-h> <left>
inoremap <A-j> <down>
inoremap <A-k> <up>
inoremap <A-l> <right>
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

set pastetoggle=<F10>
"Grep
nnoremap <silent> <F10> :Grep<CR>
nnoremap <silent> ; :
set foldenable
set foldmethod=indent
set foldlevel=100
set incsearch
set hlsearch
set nobackup
set confirm
set ruler
set scrolloff=3
"quick load _vimrc
nmap <silent> <leader>e :e /usr/share/vim/vimrc <CR>
"Fold Code With Space
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"Window split
let g:NERDTree_title="[NERD Tree]" 

"let g:winManagerWindowLayout='NERDTree|TagList,BufExplorer'
let g:winManagerWindowLayout='NERDTree|TagList'
function! NERDTree_Start()
    exec 'NERDTree'
endfunction

function! NERDTree_IsValid()
    return 1
endfunction

let g:AutoOpenWinManager = 0
"let g:AutoOpenWinManager = 1
nmap <F8> :WMToggle<CR>

"Highlight CurrentLine
highlight CurrentLine guibg=grey30
au! Cursorhold * exe 'match CurrentLine /\%' . line('.') . 'l.*/'
set ut=100
"highlight StatusLine guifg=SlateBlue guibg=White
"highlight StatusLineNC guifg=Gray guibg=White
au InsertEnter * hi StatusLine guibg=#616D29 guifg=#FCFCFC gui=none
au InsertLeave * hi StatusLine guibg=grey70 guifg=#363636 gui=none
set statusline=[%n]%<%f%y%h%m%r%=[%b\ 0x%B]\ %l\/\%L,%c%V\ Page\ %N\ %P

"Auto Complete Bracket
:inoremap ( ()<ESC>i
:inoremap { {}<ESC>i
"<CR><ESC>k$a<CR>
:inoremap [ []<ESC>i
:inoremap ' ''<ESC>i
:inoremap " ""<ESC>i
"au FileType html,xml,vim,php :inoremap < <><ESC>i
inoremap jj <ESC>


let g:SuperTabDefaultCompletionType = "context"
let g:fencview_autodetect = 1
" Žò¿ªÎÄŒþÊ±£¬×ÜÊÇÌøµœÍË³öÖ®Ç°µÄ¹â±êŽŠ
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" ÓÃÇ³É«žßÁÁµ±Ç°ÐÐ
if has("gui_running")
    autocmd InsertLeave * se nocul
    autocmd InsertEnter * se cul
endif
" ±êÇ©Ò³ÉèÖÃ
if has("gui_running")
    "    map! tn tabnew
    nmap <C-n> :tabnew<CR>
    nmap <C-c> :tabclose<CR>
endif

set tabpagemax=12

" ±êÇ©Ò³Ö»ÏÔÊŸÎÄŒþÃû
function ShortTabLabel ()
    let bufnrlist = tabpagebuflist (v:lnum)
    let label = bufname (bufnrlist[tabpagewinnr (v:lnum) -1])
    let filename = fnamemodify (label, ':t')
    return filename
endfunction

set guitablabel=%{ShortTabLabel()}

" Ê¹»ØžñŒü£šbackspace£©Õý³£ŽŠÀíindent, eol, startµÈ
set backspace=eol,start,indent
" Æô¶¯µÄÊ±ºò²»ÏÔÊŸÄÇžöÔ®ÖúË÷ÂíÀï¶ùÍ¯µÄÌáÊŸ
"set shortmess=atI
" Íš¹ýÊ¹ÓÃ: commandsÃüÁî£¬žæËßÎÒÃÇÎÄŒþµÄÄÄÒ»ÐÐ±»žÄ±ä¹ý
set report=0
" ²»ÈÃvim·¢³öÌÖÑáµÄµÎµÎÉù
set noerrorbells
" ÔÚ±»·ÖžîµÄŽ°¿ÚŒäÏÔÊŸ¿Õ°×£¬±ãÓÚÔÄ¶Á
let NERDTreeShowBookmarks=1
let NERDTreeWinSize=24
"Cursor Shape
if has("autocmd")
au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
endif

 "let g:slimv_swank_cmd = '!start "D:/Paroid/LispCabinet/cabinet/bin/ccl/wx86cl.exe" -l "D:/Paroid/LispCabinet/cabinet/site/lisp/slime/start-swank.lisp"' 

